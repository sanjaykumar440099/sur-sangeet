{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ionic/angular\";\nexport class Interceptor {\n  constructor(router, toastController) {\n    this.router = router;\n    this.toastController = toastController;\n  }\n  intercept(request, next) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          'Authorization': token\n        }\n      });\n    }\n    if (!request.headers.has('Content-Type')) {\n      request = request.clone({\n        setHeaders: {\n          'content-type': 'application/json'\n        }\n      });\n    }\n    request = request.clone({\n      headers: request.headers.set('Accept', 'application/json')\n    });\n    return next.handle(request).pipe(map(event => {\n      if (event instanceof HttpResponse) {\n        console.log('event--->>>', event);\n      }\n      return event;\n    }), catchError(error => {\n      if (error.status === 401) {\n        if (error.error.success === false) {\n          this.presentToast('Login failed');\n        } else {\n          this.router.navigate(['login']);\n        }\n      }\n      return throwError(error);\n    }));\n  }\n  presentToast(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const toast = yield this.toastController.create({\n        message: msg,\n        duration: 2000,\n        position: 'top'\n      });\n      toast.present();\n    });\n  }\n}\nInterceptor.ɵfac = function Interceptor_Factory(t) {\n  return new (t || Interceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastController));\n};\nInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Interceptor,\n  factory: Interceptor.ɵfac\n});","map":{"version":3,"mappings":";AAAA,SAA+DA,YAAY,QAA2B,sBAAsB;AAC5H,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;;AAMhD,OAAM,MAAOC,WAAW;EACtBC,YACUC,MAAc,EACfC,eAAgC;IAD/B,WAAM,GAAND,MAAM;IACP,oBAAe,GAAfC,eAAe;EACrB;EAEHC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAEpD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIF,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAE;UACV,eAAe,EAAEJ;;OAEpB,CAAC;;IAGJ,IAAI,CAACF,OAAO,CAACO,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,EAAE;MACxCR,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAE;UACV,cAAc,EAAE;;OAEnB,CAAC;;IAGJN,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;MACtBE,OAAO,EAAEP,OAAO,CAACO,OAAO,CAACE,GAAG,CAAC,QAAQ,EAAE,kBAAkB;KAC1D,CAAC;IAEF,OAAOR,IAAI,CAACS,MAAM,CAACV,OAAO,CAAC,CAACW,IAAI,CAC9BlB,GAAG,CAAEmB,KAAqB,IAAI;MAC5B,IAAIA,KAAK,YAAYrB,YAAY,EAAE;QACjCsB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,KAAK,CAAC;;MAEnC,OAAOA,KAAK;IACd,CAAC,CAAC,EACFlB,UAAU,CAAEqB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAID,KAAK,CAACA,KAAK,CAACE,OAAO,KAAK,KAAK,EAAE;UACjC,IAAI,CAACC,YAAY,CAAC,cAAc,CAAC;SAClC,MAAM;UACL,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;;MAGnC,OAAO3B,UAAU,CAACuB,KAAK,CAAC;IAC1B,CAAC,CAAC,CAAC;EACP;EAEMG,YAAY,CAACE,GAAQ;;MACzB,MAAMC,KAAK,GAAG,MAAM,IAAI,CAACvB,eAAe,CAACwB,MAAM,CAAC;QAC9CC,OAAO,EAAEH,GAAG;QACZI,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE;OACX,CAAC;MACFJ,KAAK,CAACK,OAAO,EAAE;IACjB,CAAC;;;;mBAxDU/B,WAAW;AAAA;;SAAXA,WAAW;EAAAgC,SAAXhC,WAAW;AAAA","names":["HttpResponse","throwError","map","catchError","Interceptor","constructor","router","toastController","intercept","request","next","token","localStorage","getItem","clone","setHeaders","headers","has","set","handle","pipe","event","console","log","error","status","success","presentToast","navigate","msg","toast","create","message","duration","position","present","factory"],"sourceRoot":"","sources":["D:\\ionic\\sur-taal\\src\\app\\intercepter\\interceptor.ts"],"sourcesContent":["import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpResponse, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { ToastController } from '@ionic/angular';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class Interceptor implements HttpInterceptor {\r\n  constructor(\r\n    private router: Router,\r\n    public toastController: ToastController\r\n  ) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    const token = localStorage.getItem('token');\r\n  \r\n    if (token) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          'Authorization': token\r\n        }\r\n      });\r\n    }\r\n  \r\n    if (!request.headers.has('Content-Type')) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          'content-type': 'application/json'\r\n        }\r\n      });\r\n    }\r\n  \r\n    request = request.clone({\r\n      headers: request.headers.set('Accept', 'application/json')\r\n    });\r\n  \r\n    return next.handle(request).pipe(\r\n      map((event: HttpEvent<any>) => {\r\n        if (event instanceof HttpResponse) {\r\n          console.log('event--->>>', event);\r\n        }\r\n        return event;\r\n      }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        if (error.status === 401) {\r\n          if (error.error.success === false) {\r\n            this.presentToast('Login failed');\r\n          } else {\r\n            this.router.navigate(['login']);\r\n          }\r\n        }\r\n        return throwError(error);\r\n      }));\r\n  }\r\n\r\n  async presentToast(msg: any) {\r\n    const toast = await this.toastController.create({\r\n      message: msg,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}