{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiBaseUrl = environment.baseUrl;\n  }\n  // login api\n  login(data) {\n    const url = this.apiBaseUrl + 'apiRouter/login';\n    return this.http.post(url, data, {\n      observe: 'response'\n    }).pipe(map(response => {\n      return response.body;\n    }), catchError(error => {\n      return throwError(error);\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFzB,eAAU,GAAQH,WAAW,CAACI,OAAO;EAEI;EAExC;EACAC,KAAK,CAAEC,IAAS;IACd,MAAMC,GAAG,GAAG,IAAI,CAACC,UAAU,GAAG,iBAAiB;IAC/C,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAACF,GAAG,EAAED,IAAI,EAAE;MAAEI,OAAO,EAAE;IAAU,CAAE,CAAC,CAACC,IAAI,CAACZ,GAAG,CAAEa,QAAa,IAAI;MACnF,OAAOA,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,EAAEf,UAAU,CAAEgB,KAAwB,IAAI;MAC1C,OAAOjB,UAAU,CAAEiB,KAAK,CAAC;IAC3B,CAAC,CAAC,CAAC;EACL;;;mBAdWb,WAAW;AAAA;;SAAXA,WAAW;EAAAc,SAAXd,WAAW;EAAAe,YAFV;AAAM","names":["throwError","catchError","map","environment","AuthService","constructor","http","baseUrl","login","data","url","apiBaseUrl","post","observe","pipe","response","body","error","factory","providedIn"],"sourceRoot":"","sources":["D:\\ionic\\sur-taal\\src\\app\\auth\\authService\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n apiBaseUrl: any = environment.baseUrl;\n\n  constructor(private http: HttpClient) { }\n\n  // login api\n  login (data: any): Observable<any> {\n    const url = this.apiBaseUrl + 'apiRouter/login'\n    return this.http.post(url, data, { observe: 'response' }).pipe(map((response: any) => {\n      return response.body;\n    }), catchError((error: HttpErrorResponse) => {\n      return throwError (error)\n    }))\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}