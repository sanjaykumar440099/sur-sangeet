{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ionic/angular\";\nexport let Interceptor = /*#__PURE__*/(() => {\n  class Interceptor {\n    constructor(router, toastController) {\n      this.router = router;\n      this.toastController = toastController;\n    }\n    intercept(request, next) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        request = request.clone({\n          setHeaders: {\n            'Authorization': token\n          }\n        });\n      }\n      if (!request.headers.has('Content-Type')) {\n        request = request.clone({\n          setHeaders: {\n            'content-type': 'application/json'\n          }\n        });\n      }\n      request = request.clone({\n        headers: request.headers.set('Accept', 'application/json')\n      });\n      return next.handle(request).pipe(map(event => {\n        if (event instanceof HttpResponse) {\n          console.log('event--->>>', event);\n        }\n        return event;\n      }), catchError(error => {\n        if (error.status === 401) {\n          if (error.error.success === false) {\n            this.presentToast('Login failed');\n          } else {\n            this.router.navigate(['login']);\n          }\n        }\n        return throwError(error);\n      }));\n    }\n    presentToast(msg) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastController.create({\n          message: msg,\n          duration: 2000,\n          position: 'top'\n        });\n        toast.present();\n      });\n    }\n  }\n  Interceptor.ɵfac = function Interceptor_Factory(t) {\n    return new (t || Interceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastController));\n  };\n  Interceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Interceptor,\n    factory: Interceptor.ɵfac\n  });\n  return Interceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}